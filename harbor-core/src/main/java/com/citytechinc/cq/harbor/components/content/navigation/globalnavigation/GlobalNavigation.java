package com.citytechinc.cq.harbor.components.content.navigation.globalnavigation;


import com.citytechinc.cq.component.annotations.*;
import com.citytechinc.cq.component.annotations.editconfig.ActionConfig;
import com.citytechinc.cq.component.annotations.widgets.Selection;
import com.citytechinc.cq.harbor.components.content.navigation.globalnavigation.tree.NavigationTree;
import com.citytechinc.cq.library.components.AbstractComponent;
import com.citytechinc.cq.library.content.node.ComponentNode;
import com.citytechinc.cq.library.content.request.ComponentRequest;
import org.apache.sling.api.resource.Resource;

import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;

@Component(value = "Global Navigation",
        actions = {"text: Global Navigation", "-", "edit", "-", "delete"},
        contentAdditionalProperties = {
                @ContentProperty(name="dependencies", value="harbor.components.content.globalnavigation")
        },
        actionConfigs = {
                @ActionConfig(xtype = "tbseparator"),
                @ActionConfig(text = "Add Navigation Column", handler = "function(){ Harbor.Components.GlobalNavigation.addNavigationElement(this) }"),
        },
        listeners = {
                @Listener(name = "afterinsert", value = "REFRESH_PAGE")
        },
        allowedParents = "*/parsys"
)
public class GlobalNavigation extends AbstractComponent {
    private List<NavigationElement> navigationElementList;
    private NavigationTree navTree;

    public GlobalNavigation(ComponentRequest request) {
        super(request);

        if(getAutoGenerateNavigation()){
            //Automatically Generate Navigation Tree
            navTree = new NavigationTree(request, 2);
        }
        else{
            //Initialize list of manual navigation elements
            navigationElementList = new ArrayList<NavigationElement>();
            //Add The child elements of our GlobalNav to the Nav Element list
            Iterator<Resource> navigationResourceIterator = request.getResource().listChildren();

            while (navigationResourceIterator.hasNext()) {
                this.navigationElementList.add(new NavigationElement(navigationResourceIterator.next().adaptTo(ComponentNode.class)));
            }
        }
    }

    @DialogField(fieldLabel = "Auto Generate Navigation?",
            fieldDescription = "")
    @Selection(type=Selection.CHECKBOX, options = {
            @Option(text="", value = "true")
    })
    public Boolean getAutoGenerateNavigation(){
        return get("autoGenerateNavigation", "").equals("true");
    }

    public NavigationTree getNavigationTree(){
        return navTree;
    }

    public List<NavigationElement> getNavigationElementList(){
        return navigationElementList;
    }

    public boolean getIsAutoGenerated(){
        return getAutoGenerateNavigation();
    }
}
